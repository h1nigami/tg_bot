from loader import dp, bot
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher import FSMContext
from aiogram import types

from data import db, config
from keyboards.inline import get_sub_menu_keyboard, get_get_menu_keyboard, get_invite_menu_keyboard
from keyboards.default import get_menu_keyboard
from filters import IsUserMessage

@dp.message_handler(CommandStart(), state='*')
@dp.message_handler(text='‚ÑπÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state='*')
async def bot_start(message: types.Message, state:FSMContext):
    await state.finish()

    user = await db.get_user(message.from_user.id)
    if not user:
        args = message.get_args()
        await db.create_user(message.from_user.id, message.from_user.first_name)
        ref = args if args else None
        if ref:
            await db.add_user_ref(message.from_user.id, ref)

    sponsors = await db.get_all_sponsors()

    if sponsors:
        for sponsor in sponsors:
            if sponsor[0] == 0:
                continue

            user_channel_status = await bot.get_chat_member(chat_id=sponsor[0], user_id=message.from_user.id)
            if user_channel_status["status"] == 'left':
                return await message.answer(
                    f'''üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º –±–æ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Å—å –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª!

*–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø–æ–Ω—Å–æ—Ä –ú–¢–°!

–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–π–¥—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ! üëá''', reply_markup=get_sub_menu_keyboard(sponsors)
                )
    else:
        return await message.answer('–î–æ–±–∞–≤—å—Ç–µ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ!')

    await get_menu(message, state)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler( text='check_sub', state='*')
async def check_sub(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.answer('DONE')
    await call.message.delete()

    sponsors = await db.get_all_sponsors()
    
    for sponsor in sponsors:
        user_channel_status = await bot.get_chat_member(chat_id=sponsor[0], user_id=call.from_user.id)
        if user_channel_status["status"] == 'left':
            return await call.message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É!', reply_markup=get_sub_menu_keyboard(sponsors))
    
    await get_menu(call, state)

# –ú–µ–Ω—é
@dp.callback_query_handler(text='menu', state='*')
async def get_menu(call: types.CallbackQuery, state: FSMContext):
    await state.finish()

    user = await db.get_user(call.from_user.id)

    if type(call) == types.CallbackQuery:
        await call.message.answer('''üéÅ –°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ –∫–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ?''', reply_markup=get_menu_keyboard(str(user[0])))
    else:
        await call.answer('üéÅ –°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ –∫–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ?', reply_markup=get_menu_keyboard(str(user[0])))

@dp.message_handler(IsUserMessage(), text='4000 UC', state='*')
@dp.message_handler(IsUserMessage(), text='Metro royale pass', state='*')
@dp.message_handler(IsUserMessage(), text='X-suit collection', state='*')
async def products(message: types.Message, state:FSMContext):
    await state.finish()

    user = await db.get_user(message.from_user.id)
    if user[3]:
        await db.add_ref(user[3])
        await db.delete_user_ref(message.from_user.id)

    photo = message.text.replace('"', '')
    await message.answer_photo(open(f'src/{photo}.jpg', 'rb'),
        f'‚úÖ –ú—ã —Ç–µ–±—è –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ "{message.text}" —Ç–µ–±–µ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ —Ç—ã –Ω–µ —Ä–æ–±–æ—Ç, –∞ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫.\n\n'
        '–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –°–í–û–ô –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –∑–∞–±—Ä–∞—Ç—å –ü–†–û–ú–û–ö–û–î!\n\n'
        f'‚ùóÔ∏è‚ùóÔ∏è–ü–ò–®–ò –ï–ú–£ –°–í–û–ô –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê - @{config.manager} –ò –ó–ê–ë–ò–†–ê–ô –ü–†–û–ú–û–ö–û–î –ù–ê "{message.text}"!\n\n'
        'üéÅ–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞, –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ.', reply_markup=get_get_menu_keyboard()
    )

@dp.callback_query_handler(text='invite', state='*')
async def invite(call: types.CallbackQuery, state: FSMContext):
    await call.answer('DONE')

    await call.message.answer(
        'üéÅ –ï—Å–ª–∏ —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥! –¢–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 1000UC –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –≤ —ç—Ç–æ—Ç –±–æ—Ç –∏ –∑–∞–±–µ—Ä—ë—Ç —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥!\n\n'
        '‚ùóÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –¥—Ä—É–∑—å—è–º!\n\n'
        f'üßë‚Äçüíª –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ —Å–¥–µ–ª–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–π –Ω–æ–º–µ—Ä +7 –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É! @{config.manager}', reply_markup=get_invite_menu_keyboard())

@dp.callback_query_handler(text='promo', state='*')
async def promo(call: types.CallbackQuery, state: FSMContext):
    await call.answer('DONE')

    await call.message.answer(f'–ú–µ–Ω–µ–¥–∂–µ—Ä: @{config.manager}')